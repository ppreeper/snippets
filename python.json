{
  "odoo": { "prefix": ["odoo"], "body": [""], "description": "" },
  "python env": {
    "prefix": ["sb"],
    "body": ["#!/usr/bin/env python"],
    "description": ""
  },
  "python3 env": {
    "prefix": ["sb3"],
    "body": ["#!/usr/bin/env python3"],
    "description": ""
  },
  "unicode": {
    "prefix": ["ucode"],
    "body": ["# -*- coding: utf-8 -*-"],
    "description": ""
  },
  "odoo manifest": {
    "prefix": ["oomanifest"],
    "body": [
      "{",
      "'name': '$1',",
      "'version': '1.0.1.0',",
      "'description': '$2',",
      "'summary': '$2',",
      "'author': '$3',",
      "'website': '',",
      "'license': 'AGPL-3',",
      "'category': '',",
      "'maintainer': '',",
      "'contributors': [",
      "'',",
      "],",
      "'depends': [",
      "''",
      "],",
      "'data': [",
      "''",
      "],",
      "'demo': [",
      "''",
      "],",
      "'auto_install': True,",
      "'application': True,",
      "}"
    ],
    "description": "add manifest"
  },

  "from import": {
    "prefix": ["oofimport"],
    "body": ["from . import ${1:names}"],
    "description": "add from import"
  },

  "odoo import": {
    "prefix": ["ooimport"],
    "body": ["from odoo import _, api, fields, models, tools"],
    "description": "add default oddoo imports"
  },

  "from models": {
    "prefix": ["oofile"],
    "body": ["from . import models"],
    "description": ""
  },

  "oomodel": {
    "prefix": ["oomodel"],
    "body": [
      "class ${1:ModuleName}(models.Model):",
      "\t_name = '${2:module.name}'",
      "\t_description = '${3:description}'",
      "\t$0"
    ],
    "description": "add model"
  },

  "oomodeli": {
    "prefix": ["oomodeli"],
    "body": [
      "class ${1:ModuleName}(models.Model):",
      "\t_inherit = '${2:module.name}'",
      "\tname = fields.Char(string='${3:name}')",
      "\t$0"
    ],
    "description": "inherit existing model"
  },

  "oofboolean": {
    "prefix": ["oofboolean"],
    "body": ["${1:field_name} = fields.Boolean(string='$0',help='')"],
    "description": "add boolean field"
  },

  "oofbinary": {
    "prefix": ["oofbinary"],
    "body": ["${1:field_name} = fields.Binary(string='$0')"],
    "description": "add binary field"
  },

  "ooattachment": {
    "prefix": ["ooattachment"],
    "body": [
      "attachment = fields.Binary(string='attachment', attachment=True)"
    ],
    "description": "add attachment field"
  },

  "oofchar": {
    "prefix": ["oofchar"],
    "body": ["${1:field_name} = fields.Char(string='$0')"],
    "description": "add char field"
  },

  "ooftext": {
    "prefix": ["ooftext"],
    "body": ["${1:field_name} = fields.Text(string='$0')"],
    "description": "add text field"
  },

  "oofhtml": {
    "prefix": ["oofhtml"],
    "body": ["${1:field_name} = fields.Html(string='$0')"],
    "description": "add html field"
  },

  "oofinteger": {
    "prefix": ["oofinteger"],
    "body": ["${1:field_name} = fields.Integer(string='$0')"],
    "description": "add integer field"
  },

  "ooffloat": {
    "prefix": ["ooffloat"],
    "body": [
      "${1:field_name} = fields.Float(string='$0', digits=(${2:total}, ${3:decimal}))"
    ],
    "description": "add float field"
  },

  "oofmonetary": {
    "prefix": ["oofmonetary"],
    "body": ["${1:field_name} = fields.Monetary(string='$0')"],
    "description": "add monetary field"
  },

  "oofdate": {
    "prefix": ["oofdate"],
    "body": [
      "${1:field_name} = fields.Date(string='$0',${2:default=fields.Date.context_today})"
    ],
    "description": "add date field"
  },

  "oofdatetime": {
    "prefix": ["oofdatetime"],
    "body": [
      "${1:field_name} = fields.DateTime(string='$0',${2:default=fields.Datetime.now})"
    ],
    "description": "add datetime field"
  },

  "oofselection": {
    "prefix": ["oofselection"],
    "body": [
      "${1:field_name} = fields.Selection([",
      "('${2:key}', '${3:value}')",
      "], string='$0', default='', help='')"
    ],
    "description": "add selection field"
  },

  "oofmany2one": {
    "prefix": ["oofmany2one"],
    "body": [
      "${1:field_name} = fields.Many2one('${2:comodel_name}', string='$0', ${3:ondelete='restrict'}, ${4:required=True}, help='')"
    ],
    "description": "add many2one field"
  },

  "oofone2many": {
    "prefix": ["oofone2many"],
    "body": [
      "${1:field_name} = fields.One2many('${2:comodel_name}', '${3:inverse_field}', string='$0')"
    ],
    "description": "add one2many field"
  },

  "oofmany2many": {
    "prefix": ["oofmany2many"],
    "body": [
      "${1:field_name} = fields.Many2many('${2:comodel_name}', string='$0')"
    ],
    "description": "add many2many field"
  },

  "oofcompute": {
    "prefix": ["oofcompute"],
    "body": [
      "${1:field_name} = fields.Char(compute='_compute_${1:field_name}', string='$2')",
      "@api.depends('$0')",
      "def _compute_${1:field_name}(self):",
      "\tpass"
    ],
    "description": "add compute field"
  },

  "oofcomputei": {
    "prefix": ["oofcomputei"],
    "body": [
      "${1:field_name} = fields.Char(compute='_compute_${1:field_name}', inverse='_inverse_${1:field_name}', string='')",
      "@api.depends('')",
      "def _compute_${1:field_name}(self):",
      "\tpass",
      "def _inverse_${1:field_name}(self):",
      "\tpass"
    ],
    "description": "add compute field with inverse method"
  },

  "oofcomputeex": {
    "prefix": ["oofcomputeex"],
    "body": [
      "${1:field_name} = fields.Char(compute='_compute_${1:field_name}', inverse='_inverse_${1:field_name}', search='_search_${1:field_name}', string='')",

      "@api.depends('')",
      "def _compute_${1:field_name}(self):",
      "\tpass",
      "def _inverse_${1:field_name}(self):",
      "\tpass",
      "def _search_${1:field_name}(self, operator, value):",
      "\tpass"
    ],
    "description": "add extended compute method"
  },

  "oocreate": {
    "prefix": ["oocreate"],
    "body": [
      "@api.model",
      "def create(self, ${1:vals}):",
      "\treturn super().create($1)"
    ],
    "description": "add create method"
  },

  "oonameget": {
    "prefix": ["oonameget"],
    "body": ["def name_get(self):", "\tpass"],
    "description": "override name get method"
  },

  "oonamesearch": {
    "prefix": ["oonamesearch"],
    "body": [
      "@api.model",
      "def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):",
      "\tpass"
    ],
    "description": "override private name search method"
  },

  "oowrite": {
    "prefix": ["oowrite"],
    "body": ["def write(self, ${1:vals}):", "\treturn super().write($1)"],
    "description": "add write method"
  },

  "oocopy": {
    "prefix": ["oocopy"],
    "body": [
      "def copy(self, default=None):",
      "\tres = super().copy(default)",
      "\t$0",
      "\treturn res"
    ],
    "description": "add copy method"
  },

  "oofonchange": {
    "prefix": ["oofonchange"],
    "body": ["@api.onchange('$0')", "def _onchange_(self):", "\tpass"],
    "description": "add onchange field"
  },

  "oofconstrains": {
    "prefix": ["oofconstrains"],
    "body": [
      "@api.constrains('${1:fieldname}')",
      "def _constrains_${1:fieldname}(self):",
      "\tpass"
    ],
    "description": "add constains to field"
  },

  "oounlink": {
    "prefix": ["oounlink"],
    "body": ["def unlink(self):", "\treturn super().unlink()"],
    "description": "add unlink method"
  },

  "oologger": {
    "prefix": ["oologger"],
    "body": ["import logging", "_logger = logging.getLogger(__name__)"],
    "description": "import logger"
  },

  "oologinfo": {
    "prefix": ["oologinfo"],
    "body": ["_logger.info(\"$0\")"],
    "description": "log info message"
  },

  "oologdebug": {
    "prefix": ["oologdebug"],
    "body": ["_logger.debug(\"$0\")"],
    "description": "log debug message"
  },

  "oologerror": {
    "prefix": ["oologerror"],
    "body": ["_logger.error(\"$0\")"],
    "description": "log error message"
  },

  "ootests": {
    "prefix": ["ootests"],
    "body": ["from odoo.tests import common"],
    "description": "import odoo unit tests"
  },

  "ootesttrx": {
    "prefix": ["ootesttrx"],
    "body": [
      "class ${1:ModuleName}Tests(common.TransactionCase):",
      "\tdef test_(self):",
      "\t\tpass",
      "\tdef setUp(self):",
      "\t\tsuper($1, self).setUp()",
      "\tdef test_item_name(self):",
      "\t\t\"\"\" Checks if the item_name works properly \"\"\"",
      "\t\tpass",
      "\t$0"
    ],
    "description": "generate odoo transaction test case"
  },

  "ooaddTypeEqualityFunc": {
    "prefix": ["ooaddTypeEqualityFunc"],
    "body": ["addTypeEqualityFunc(typeobj, function)"],
    "description": ""
  },

  "ooassertAlmostEqual": {
    "prefix": ["ooassertAlmostEqual"],
    "body": [
      "assertAlmostEqual(first, second, places=7, msg=None, delta=None)"
    ],
    "description": ""
  },

  "ooassertDictContainsSubset": {
    "prefix": ["ooassertDictContainsSubset"],
    "body": ["assertDictContainsSubset(expected, actual, msg=None)"],
    "description": ""
  },

  "ooassertDictEqual": {
    "prefix": ["ooassertDictEqual"],
    "body": ["assertDictEqual(expected, actual, msg=None)"],
    "description": ""
  },

  "ooassertEqual": {
    "prefix": ["ooassertEqual"],
    "body": ["assertEqual(first, second, msg=None)"],
    "description": ""
  },

  "ooassertFalse": {
    "prefix": ["ooassertFalse"],
    "body": ["assertFalse(expr, msg=None)"],
    "description": ""
  },

  "ooassertGreater": {
    "prefix": ["ooassertGreater"],
    "body": ["assertGreater(first, second, msg=None)"],
    "description": ""
  },

  "ooassertGreaterEqual": {
    "prefix": ["ooassertGreaterEqual"],
    "body": ["assertGreaterEqual(first, second, msg=None)"],
    "description": ""
  },

  "ooassertIn": {
    "prefix": ["ooassertIn"],
    "body": ["assertIn(first, second, msg=None)"],
    "description": "assertIn"
  },

  "ooassertIs": {
    "prefix": ["ooassertIs"],
    "body": ["assertIs(first, second, msg=None)"],
    "description": "assertIs"
  },

  "ooassertIsInstance": {
    "prefix": ["ooassertIsInstance"],
    "body": ["assertIsInstance(obj, cls, msg=None)"],
    "description": ""
  },

  "ooassertIsNone": {
    "prefix": ["ooassertIsNone"],
    "body": ["assertIsNone(expr, msg=None)"],
    "description": ""
  },

  "ooassertIsNot": {
    "prefix": ["ooassertIsNot"],
    "body": ["assertIsNot(first, second, msg=None)"],
    "description": ""
  },

  "ooassertIsNotNone": {
    "prefix": ["ooassertIsNotNone"],
    "body": ["assertIsNotNone(expr, msg=None)"],
    "description": ""
  },

  "ooassertItemsEqual": {
    "prefix": ["ooassertItemsEqual"],
    "body": ["assertItemsEqual(actual, expected, msg=None)"],
    "description": ""
  },

  "ooassertLess": {
    "prefix": ["ooassertLess"],
    "body": ["assertLess(first, second, msg=None)"],
    "description": ""
  },

  "ooassertLessEqual": {
    "prefix": ["ooassertLessEqual"],
    "body": ["assertLessEqual(first, second, msg=None)"],
    "description": ""
  },

  "ooassertListEqual": {
    "prefix": ["ooassertListEqual"],
    "body": ["assertListEqual(list1, list2, msg=None)"],
    "description": ""
  },

  "ooassertMultiLineEqual": {
    "prefix": ["ooassertMultiLineEqual"],
    "body": ["assertMultiLineEqual(first, second, msg=None)"],
    "description": ""
  },

  "ooassertNotAlmostEqual": {
    "prefix": ["ooassertNotAlmostEqual"],
    "body": [
      "assertNotAlmostEqual(first, second, places=7, msg=None, delta=None)"
    ],
    "description": ""
  },

  "ooassertNotEqual": {
    "prefix": ["ooassertNotEqual"],
    "body": ["assertNotEqual(first, second, msg=None)"],
    "description": ""
  },

  "ooassertNotIn": {
    "prefix": ["ooassertNotIn"],
    "body": ["assertNotIn(first, second, msg=None)"],
    "description": ""
  },

  "ooassertNotIsInstance": {
    "prefix": ["ooassertNotIsInstance"],
    "body": ["assertNotIsInstance(obj, cls, msg=None)"],
    "description": ""
  },

  "ooassertNotRegexpMatches": {
    "prefix": ["ooassertNotRegexpMatches"],
    "body": ["assertNotRegexpMatches(text, regexp, msg=None)"],
    "description": ""
  },

  "ooassertRaises": {
    "prefix": ["ooassertRaises"],
    "body": ["assertRaises(exception, callable, *args, **kwds)"],
    "description": "assertRaises"
  },

  "ooassertRaisesRegexp": {
    "prefix": ["ooassertRaisesRegexp"],
    "body": ["assertRaisesRegexp(exception, regexp, callable, *args, **kwds)"],
    "description": "assertRaisesRegexp"
  },

  "ooassertRegexpMatches": {
    "prefix": ["ooassertRegexpMatches"],
    "body": ["assertRegexpMatches(text, regexp, msg=None)"],
    "description": "assertRegexpMatches"
  },

  "ooassertSequenceEqual": {
    "prefix": ["ooassertSequenceEqual"],
    "body": ["assertSequenceEqual(seq1, seq2, msg=None, seq_type=None)"],
    "description": "assertSequenceEqual"
  },

  "ooassertSetEqual": {
    "prefix": ["ooassertSetEqual"],
    "body": ["assertSetEqual(set1, set2, msg=None)"],
    "description": "assertSetEqual"
  },

  "ooassertTrue": {
    "prefix": ["ooassertTrue"],
    "body": ["assertTrue(expr, msg=None)"],
    "description": "assertTrue"
  },

  "ooassertTupleEqual": {
    "prefix": ["ooassertTupleEqual"],
    "body": ["assertTupleEqual(tuple1, tuple2, msg=None)"],
    "description": "assertTupleEqual"
  }
}
